//Facts and Dimensions.

In data engineering, a Fact is a specific, well defined numeric attribute.
By contrast, context is open ended and verbose

Facts can be divided into logical clumps of context like product, store time, customer.
The logical clumps are called 'Dimensions' and assume informally that dimensions are independent.
(You could call these 'tables')

Dimensions should only cosist of a facts that form a 'uniform grain' (the same dimensionality)
to exist in a single fact table.
Uniform grain guarantees that all the dimensions are used with all the fact records.
(for example, don't add daily data to a yearly data table.)

Don't fecth specific rows, fetch a bunch and then apply calculation to them to make them digestible.
(compute the unit price by dividing the dollar sales by the unit sales)
Some facts can be awkward to compute in this way, like bank balances and inventory reels.
(divide the answer by the number of time periods to get the right result.
This technique is called averaging over time.)

Degenerate dimensions are those attributes that do not fit into any single dimension table and,
therefore, only exist as a key value in a fact table used for filtering queries


//Improving at SQL as a Data Engineer.

un-ironically just read this entire document again.
https://www.startdataengineering.com/post/improve-sql-skills-de/


// CTEs and when to use them

Mostly, the only difference between CTEs and Subqueries is readability,
with negligable performance costs differences.

using a bunch of CTEs is bad for readability.

If you reuse temp tables, make sure to cost calculate them.

It is good practice to check the query plans for best performance.


//Window Functions.

Window functions are useful when you have to

1. Rank rows based on a certain column(s) within each partition in the table.
2. Label numerical values within each partition into buckets based on percentile.
3. Identify the first(or second or last) event within a specific partition.
4. Calculate rolling average/mean.

Window functions are typically used when a calculation is needed to be performed on a
specific set of rows and keep the result at row level or perform calculations based on a rolling window.

Window functions can be very expensive to use (in terms of latency), and should always be tested or reconsidered with
other methods such as group by 

//What is a Data Warehouse?

In short, a data warehouse is the combined data of other databases that you would utilize
to provide information tot he end user.

There are multiple design patterns for data warehouses, a few popular ones are
1.Dimensional modeling - Kimball
2.Data vault - Linstedt
3.Data mart
4.Flat table

OLTP vs OLAP
(the table doesn't paste into here cleanly, just look it up)
https://www.startdataengineering.com/post/what-is-a-data-warehouse/#4-oltp-vs-olap-based-data-warehouses

A row oriented database isn't as memory efficient as a column oriented database because the column database
would only load the columns it needs but the row oriented database would load the entire table.
This makes column based databases better for larger databases

//Other Thoughts

The documents and pages i was instruced to read often included the use of tools i've never heard of
and have no experience with, i'm sure i'll get to know all about it eventually, but getting a primer
on these tools would have been prefferable.

//Sql code project notes

I had some dofficulty getting into the assigned project for this part, so after briefly consulting with the Joseph Machado,
i was advised instead to follow a different project, link below.
https://github.com/josephmachado/adv_data_transformation_in_sql/

The project above covered many of the basics of SQL, below are some of the things i didn't know.

//1.Basics

In a `like` condition, a `_` means any single character, and `%` means zero or more characters

//2.Window functions

Common scenarios when you want to use window functions

1. Calculate running metrics/sliding window over rows in the table (aggregate functions)
2. Ranking rows based on values in column(s) (ranking functions)
3. Access other row's values while operating on the current row (value functions)
4. Any combination of the above

Window functions have four essential parts

1. Partition: Defines a set of rows based on specified column(s) value. If no partition is specified, the entire table is considered a partition.
2. Order By: This optional clause specifies how to order the rows within a partition.
3. Function: The function to be applied on the current row. The function results in an additional column in the output.
4. Window frame: Within a partition, a window frame allows you to specify the rows to be considered in the function computation.

Here is a quick definition of the standard VALUE functions: 

1. NTILE(n): Divides the rows in the window frame into n approximately equal groups, and assigns a number to each row indicating which group it belongs to.
2. FIRST_VALUE(): Returns the first value in the window frame.
3. LAST_VALUE(): Returns the last value in the window frame.
4. LAG(): Accesses data from a previous row within the window frame.
5. LEAD(): Accesses data from a subsequent row within the window frame.

//3. CTE

Just because you can make CTE's doesn't mean you should, you must keep in mind the time you save making them against their actual utility, reusability and readability.

1. CTEs help with the readability and reusability of your query

2. CTEs are defined using the WITH keyword

3. Donâ€™t overuse CTE; be mindful of query size

4. CTEs performance depends on the DB; check your query plan

//4. Query Template

PIVOT is a very common use case for business people using excel. It is typically used to visually inspect distribution of data (aka do the numbers align with business knowledge).


* Find the nth event in a series of events with ranking window functions

* Do pivot in SQL with a CASE WHEN inside an aggregated function

* Do period-over-period change calculation with value (lead/lag) window function

* Window functions are expensive; if your use case requires repeated use of window functions, consider pre-aggregating your data